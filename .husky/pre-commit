#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "üß™ Running pre-commit checks..."

# Run linting on staged files
echo "üìù Running ESLint..."
npx lint-staged

# Run type checking
echo "üîç Running TypeScript type check..."
npm run typecheck

# Run tests with coverage check
echo "üß™ Running tests with coverage requirements..."
npm test -- --coverage --coverageReporters=text-summary --passWithNoTests

# Check coverage thresholds
COVERAGE_OUTPUT=$(npm test -- --coverage --coverageReporters=json-summary --silent 2>&1)

# Extract coverage percentages
STATEMENTS=$(echo "$COVERAGE_OUTPUT" | grep -o '"statements":{"total":[0-9]*,"covered":[0-9]*' | grep -o '"covered":[0-9]*' | grep -o '[0-9]*')
BRANCHES=$(echo "$COVERAGE_OUTPUT" | grep -o '"branches":{"total":[0-9]*,"covered":[0-9]*' | grep -o '"covered":[0-9]*' | grep -o '[0-9]*')
FUNCTIONS=$(echo "$COVERAGE_OUTPUT" | grep -o '"functions":{"total":[0-9]*,"covered":[0-9]*' | grep -o '"covered":[0-9]*' | grep -o '[0-9]*')
LINES=$(echo "$COVERAGE_OUTPUT" | grep -o '"lines":{"total":[0-9]*,"covered":[0-9]*' | grep -o '"covered":[0-9]*' | grep -o '[0-9]*')

TOTAL=$(echo "$COVERAGE_OUTPUT" | grep -o '"statements":{"total":[0-9]*' | grep -o '[0-9]*$')

# Calculate coverage percentage
if [ -n "$STATEMENTS" ] && [ -n "$TOTAL" ] && [ "$TOTAL" -gt 0 ]; then
  COVERAGE_PCT=$(( STATEMENTS * 100 / TOTAL ))

  echo "üìä Current test coverage: ${COVERAGE_PCT}%"

  # Set minimum coverage threshold
  MIN_COVERAGE=65

  if [ "$COVERAGE_PCT" -lt "$MIN_COVERAGE" ]; then
    echo "‚ùå Test coverage is below ${MIN_COVERAGE}% (current: ${COVERAGE_PCT}%)"
    echo "Please add more tests before committing."
    exit 1
  else
    echo "‚úÖ Test coverage meets requirements (${COVERAGE_PCT}% >= ${MIN_COVERAGE}%)"
  fi
else
  echo "‚ö†Ô∏è  Could not determine test coverage, proceeding with caution..."
fi

echo "‚ú® All pre-commit checks passed!"